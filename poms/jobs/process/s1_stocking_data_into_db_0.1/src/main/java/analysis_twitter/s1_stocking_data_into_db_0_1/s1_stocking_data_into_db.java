// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package analysis_twitter.s1_stocking_data_into_db_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: s1_stocking_data_into_db Purpose: s1_stocking_data_into_db<br>
 * Description: s1_stocking_data_into_db <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class s1_stocking_data_into_db implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (connection_postgres_Port != null) {

				this.setProperty("connection_postgres_Port", connection_postgres_Port.toString());

			}

			if (connection_postgres_Schema != null) {

				this.setProperty("connection_postgres_Schema", connection_postgres_Schema.toString());

			}

			if (connection_postgres_Database != null) {

				this.setProperty("connection_postgres_Database", connection_postgres_Database.toString());

			}

			if (connection_postgres_Server != null) {

				this.setProperty("connection_postgres_Server", connection_postgres_Server.toString());

			}

			if (connection_postgres_Password != null) {

				this.setProperty("connection_postgres_Password", connection_postgres_Password.toString());

			}

			if (connection_postgres_AdditionalParams != null) {

				this.setProperty("connection_postgres_AdditionalParams",
						connection_postgres_AdditionalParams.toString());

			}

			if (connection_postgres_Login != null) {

				this.setProperty("connection_postgres_Login", connection_postgres_Login.toString());

			}

		}

		public String connection_postgres_Port;

		public String getConnection_postgres_Port() {
			return this.connection_postgres_Port;
		}

		public String connection_postgres_Schema;

		public String getConnection_postgres_Schema() {
			return this.connection_postgres_Schema;
		}

		public String connection_postgres_Database;

		public String getConnection_postgres_Database() {
			return this.connection_postgres_Database;
		}

		public String connection_postgres_Server;

		public String getConnection_postgres_Server() {
			return this.connection_postgres_Server;
		}

		public java.lang.String connection_postgres_Password;

		public java.lang.String getConnection_postgres_Password() {
			return this.connection_postgres_Password;
		}

		public String connection_postgres_AdditionalParams;

		public String getConnection_postgres_AdditionalParams() {
			return this.connection_postgres_AdditionalParams;
		}

		public String connection_postgres_Login;

		public String getConnection_postgres_Login() {
			return this.connection_postgres_Login;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "s1_stocking_data_into_db";
	private final String projectName = "ANALYSIS_TWITTER";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					s1_stocking_data_into_db.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(s1_stocking_data_into_db.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ANALYSIS_TWITTER_s1_stocking_data_into_db = new byte[0];
		static byte[] commonByteArray_ANALYSIS_TWITTER_s1_stocking_data_into_db = new byte[0];

		public Long hashtag_id;

		public Long getHashtag_id() {
			return this.hashtag_id;
		}

		public String user_name;

		public String getUser_name() {
			return this.user_name;
		}

		public String user_screen_name;

		public String getUser_screen_name() {
			return this.user_screen_name;
		}

		public String text_description;

		public String getText_description() {
			return this.text_description;
		}

		public Long date_id;

		public Long getDate_id() {
			return this.date_id;
		}

		public Long geo_id;

		public Long getGeo_id() {
			return this.geo_id;
		}

		public Long text_id;

		public Long getText_id() {
			return this.text_id;
		}

		public String geo_description;

		public String getGeo_description() {
			return this.geo_description;
		}

		public Long user_id;

		public Long getUser_id() {
			return this.user_id;
		}

		public String hashtag_text;

		public String getHashtag_text() {
			return this.hashtag_text;
		}

		public String user_location;

		public String getUser_location() {
			return this.user_location;
		}

		public java.util.Date date_description;

		public java.util.Date getDate_description() {
			return this.date_description;
		}

		public String user_description;

		public String getUser_description() {
			return this.user_description;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ANALYSIS_TWITTER_s1_stocking_data_into_db.length) {
					if (length < 1024 && commonByteArray_ANALYSIS_TWITTER_s1_stocking_data_into_db.length == 0) {
						commonByteArray_ANALYSIS_TWITTER_s1_stocking_data_into_db = new byte[1024];
					} else {
						commonByteArray_ANALYSIS_TWITTER_s1_stocking_data_into_db = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ANALYSIS_TWITTER_s1_stocking_data_into_db, 0, length);
				strReturn = new String(commonByteArray_ANALYSIS_TWITTER_s1_stocking_data_into_db, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ANALYSIS_TWITTER_s1_stocking_data_into_db) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.hashtag_id = null;
					} else {
						this.hashtag_id = dis.readLong();
					}

					this.user_name = readString(dis);

					this.user_screen_name = readString(dis);

					this.text_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.date_id = null;
					} else {
						this.date_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.geo_id = null;
					} else {
						this.geo_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.text_id = null;
					} else {
						this.text_id = dis.readLong();
					}

					this.geo_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.user_id = null;
					} else {
						this.user_id = dis.readLong();
					}

					this.hashtag_text = readString(dis);

					this.user_location = readString(dis);

					this.date_description = readDate(dis);

					this.user_description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.hashtag_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.hashtag_id);
				}

				// String

				writeString(this.user_name, dos);

				// String

				writeString(this.user_screen_name, dos);

				// String

				writeString(this.text_description, dos);

				// Long

				if (this.date_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.date_id);
				}

				// Long

				if (this.geo_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.geo_id);
				}

				// Long

				if (this.text_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.text_id);
				}

				// String

				writeString(this.geo_description, dos);

				// Long

				if (this.user_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.user_id);
				}

				// String

				writeString(this.hashtag_text, dos);

				// String

				writeString(this.user_location, dos);

				// java.util.Date

				writeDate(this.date_description, dos);

				// String

				writeString(this.user_description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hashtag_id=" + String.valueOf(hashtag_id));
			sb.append(",user_name=" + user_name);
			sb.append(",user_screen_name=" + user_screen_name);
			sb.append(",text_description=" + text_description);
			sb.append(",date_id=" + String.valueOf(date_id));
			sb.append(",geo_id=" + String.valueOf(geo_id));
			sb.append(",text_id=" + String.valueOf(text_id));
			sb.append(",geo_description=" + geo_description);
			sb.append(",user_id=" + String.valueOf(user_id));
			sb.append(",hashtag_text=" + hashtag_text);
			sb.append(",user_location=" + user_location);
			sb.append(",date_description=" + String.valueOf(date_description));
			sb.append(",user_description=" + user_description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileInputJSON_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = "/home/scasanova/Downloads/TOS_BD-20200219_1130-V7.3.1/workspace/ANALYSIS_TWITTER/documentations/apitwitter/";
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("fr*");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
							filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1.getName()
								.substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tFileInputJSON_1++;

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputJSON_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tLogRow_1 begin ] start
					 */

					ok_Hash.put("tLogRow_1", false);
					start_Hash.put("tLogRow_1", System.currentTimeMillis());

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
					}

					int tos_count_tLogRow_1 = 0;

					///////////////////////

					class Util_tLogRow_1 {

						String[] des_top = { ".", ".", "-", "+" };

						String[] des_head = { "|=", "=|", "-", "+" };

						String[] des_bottom = { "'", "'", "-", "+" };

						String name = "";

						java.util.List<String[]> list = new java.util.ArrayList<String[]>();

						int[] colLengths = new int[13];

						public void addRow(String[] row) {

							for (int i = 0; i < 13; i++) {
								if (row[i] != null) {
									colLengths[i] = Math.max(colLengths[i], row[i].length());
								}
							}
							list.add(row);
						}

						public void setTableName(String name) {

							this.name = name;
						}

						public StringBuilder format() {

							StringBuilder sb = new StringBuilder();

							sb.append(print(des_top));

							int totals = 0;
							for (int i = 0; i < colLengths.length; i++) {
								totals = totals + colLengths[i];
							}

							// name
							sb.append("|");
							int k = 0;
							for (k = 0; k < (totals + 12 - name.length()) / 2; k++) {
								sb.append(' ');
							}
							sb.append(name);
							for (int i = 0; i < totals + 12 - name.length() - k; i++) {
								sb.append(' ');
							}
							sb.append("|\n");

							// head and rows
							sb.append(print(des_head));
							for (int i = 0; i < list.size(); i++) {

								String[] row = list.get(i);

								java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

								StringBuilder sbformat = new StringBuilder();
								sbformat.append("|%1$-");
								sbformat.append(colLengths[0]);
								sbformat.append("s");

								sbformat.append("|%2$-");
								sbformat.append(colLengths[1]);
								sbformat.append("s");

								sbformat.append("|%3$-");
								sbformat.append(colLengths[2]);
								sbformat.append("s");

								sbformat.append("|%4$-");
								sbformat.append(colLengths[3]);
								sbformat.append("s");

								sbformat.append("|%5$-");
								sbformat.append(colLengths[4]);
								sbformat.append("s");

								sbformat.append("|%6$-");
								sbformat.append(colLengths[5]);
								sbformat.append("s");

								sbformat.append("|%7$-");
								sbformat.append(colLengths[6]);
								sbformat.append("s");

								sbformat.append("|%8$-");
								sbformat.append(colLengths[7]);
								sbformat.append("s");

								sbformat.append("|%9$-");
								sbformat.append(colLengths[8]);
								sbformat.append("s");

								sbformat.append("|%10$-");
								sbformat.append(colLengths[9]);
								sbformat.append("s");

								sbformat.append("|%11$-");
								sbformat.append(colLengths[10]);
								sbformat.append("s");

								sbformat.append("|%12$-");
								sbformat.append(colLengths[11]);
								sbformat.append("s");

								sbformat.append("|%13$-");
								sbformat.append(colLengths[12]);
								sbformat.append("s");

								sbformat.append("|\n");

								formatter.format(sbformat.toString(), (Object[]) row);

								sb.append(formatter.toString());
								if (i == 0)
									sb.append(print(des_head)); // print the head
							}

							// end
							sb.append(print(des_bottom));
							return sb;
						}

						private StringBuilder print(String[] fillChars) {
							StringBuilder sb = new StringBuilder();
							// first column
							sb.append(fillChars[0]);
							for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);

							for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);
							for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[3]);

							// last column
							for (int i = 0; i < colLengths[12] - fillChars[1].length() + 1; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[1]);
							sb.append("\n");
							return sb;
						}

						public boolean isTableEmpty() {
							if (list.size() > 1)
								return false;
							return true;
						}
					}
					Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
					util_tLogRow_1.setTableName("tLogRow_1");
					util_tLogRow_1.addRow(new String[] { "hashtag_id", "user_name", "user_screen_name",
							"text_description", "date_id", "geo_id", "text_id", "geo_description", "user_id",
							"hashtag_text", "user_location", "date_description", "user_description", });
					StringBuilder strBuffer_tLogRow_1 = null;
					int nb_line_tLogRow_1 = 0;
///////////////////////    			

					/**
					 * [tLogRow_1 begin ] stop
					 */

					/**
					 * [tFileInputJSON_1 begin ] start
					 */

					ok_Hash.put("tFileInputJSON_1", false);
					start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

					currentComponent = "tFileInputJSON_1";

					int tos_count_tFileInputJSON_1 = 0;

					class JsonPathCache_tFileInputJSON_1 {
						final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

						public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
							if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
								return jsonPathString2compiledJsonPath.get(jsonPath);
							} else {
								com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
										.compile(jsonPath);
								jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
								return compiledLoopPath;
							}
						}
					}

					int nb_line_tFileInputJSON_1 = 0;

					JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

					String loopPath_tFileInputJSON_1 = "$.tweets[*]";
					java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

					java.io.InputStream is_tFileInputJSON_1 = null;
					com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath
							.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
					Object filenameOrStream_tFileInputJSON_1 = null;
					try {
						filenameOrStream_tFileInputJSON_1 = "/home/scasanova/Downloads/TOS_BD-20200219_1130-V7.3.1/workspace/ANALYSIS_TWITTER/documentations/apitwitter/al-dic-01.json";
					} catch (java.lang.Exception e_tFileInputJSON_1) {

						System.err.println(e_tFileInputJSON_1.getMessage());
					}

					com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = null;
					try {
						if (filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream) {
							is_tFileInputJSON_1 = (java.io.InputStream) filenameOrStream_tFileInputJSON_1;
						} else {

							is_tFileInputJSON_1 = new java.io.FileInputStream(
									(String) filenameOrStream_tFileInputJSON_1);

						}

						document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1, "UTF-8");
						com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(loopPath_tFileInputJSON_1);
						Object result_tFileInputJSON_1 = document_tFileInputJSON_1
								.read(compiledLoopPath_tFileInputJSON_1, net.minidev.json.JSONObject.class);
						if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
							resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
						} else {
							resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
						}
					} catch (java.lang.Exception e_tFileInputJSON_1) {
						System.err.println(e_tFileInputJSON_1.getMessage());
					} finally {
						if (is_tFileInputJSON_1 != null) {
							is_tFileInputJSON_1.close();
						}
					}

					String jsonPath_tFileInputJSON_1 = null;
					com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

					Object value_tFileInputJSON_1 = null;
					Object root_tFileInputJSON_1 = null;
					for (Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
						nb_line_tFileInputJSON_1++;
						row1 = null;
						boolean whetherReject_tFileInputJSON_1 = false;
						row1 = new row1Struct();

						try {
							jsonPath_tFileInputJSON_1 = "hashtag_id";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
									row1.hashtag_id = ParserUtils.parseTo_Long(value_tFileInputJSON_1.toString());
								} else {
									row1.hashtag_id =

											null;
								}
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.hashtag_id =

										null;
							}
							jsonPath_tFileInputJSON_1 = "user_name";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								row1.user_name = value_tFileInputJSON_1 == null ?

										null : value_tFileInputJSON_1.toString();
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.user_name =

										null;
							}
							jsonPath_tFileInputJSON_1 = "user_screen_name";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								row1.user_screen_name = value_tFileInputJSON_1 == null ?

										null : value_tFileInputJSON_1.toString();
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.user_screen_name =

										null;
							}
							jsonPath_tFileInputJSON_1 = "text_description";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								row1.text_description = value_tFileInputJSON_1 == null ?

										null : value_tFileInputJSON_1.toString();
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.text_description =

										null;
							}
							jsonPath_tFileInputJSON_1 = "date_id";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
									row1.date_id = ParserUtils.parseTo_Long(value_tFileInputJSON_1.toString());
								} else {
									row1.date_id =

											null;
								}
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.date_id =

										null;
							}
							jsonPath_tFileInputJSON_1 = "geo_id";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
									row1.geo_id = ParserUtils.parseTo_Long(value_tFileInputJSON_1.toString());
								} else {
									row1.geo_id =

											null;
								}
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.geo_id =

										null;
							}
							jsonPath_tFileInputJSON_1 = "text_id";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
									row1.text_id = ParserUtils.parseTo_Long(value_tFileInputJSON_1.toString());
								} else {
									row1.text_id =

											null;
								}
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.text_id =

										null;
							}
							jsonPath_tFileInputJSON_1 = "geo_description";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								row1.geo_description = value_tFileInputJSON_1 == null ?

										null : value_tFileInputJSON_1.toString();
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.geo_description =

										null;
							}
							jsonPath_tFileInputJSON_1 = "user_id";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
									row1.user_id = ParserUtils.parseTo_Long(value_tFileInputJSON_1.toString());
								} else {
									row1.user_id =

											null;
								}
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.user_id =

										null;
							}
							jsonPath_tFileInputJSON_1 = "hashtag_text";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								row1.hashtag_text = value_tFileInputJSON_1 == null ?

										null : value_tFileInputJSON_1.toString();
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.hashtag_text =

										null;
							}
							jsonPath_tFileInputJSON_1 = "user_location";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								row1.user_location = value_tFileInputJSON_1 == null ?

										null : value_tFileInputJSON_1.toString();
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.user_location =

										null;
							}
							jsonPath_tFileInputJSON_1 = "date_description";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
									row1.date_description = ParserUtils.parseTo_Date(value_tFileInputJSON_1.toString(),
											"dd-MM-yyyy");
								} else {
									row1.date_description =

											null;
								}
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.date_description =

										null;
							}
							jsonPath_tFileInputJSON_1 = "user_description";
							compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
									.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

							try {

								if (jsonPath_tFileInputJSON_1.startsWith("$")) {
									if (root_tFileInputJSON_1 == null) {
										root_tFileInputJSON_1 = document_tFileInputJSON_1
												.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
									}
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(root_tFileInputJSON_1);
								} else {
									value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
											.read(row_tFileInputJSON_1);
								}
								row1.user_description = value_tFileInputJSON_1 == null ?

										null : value_tFileInputJSON_1.toString();
							} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
								row1.user_description =

										null;
							}
						} catch (java.lang.Exception e_tFileInputJSON_1) {
							whetherReject_tFileInputJSON_1 = true;
							System.err.println(e_tFileInputJSON_1.getMessage());
							row1 = null;
						}
//}

						/**
						 * [tFileInputJSON_1 begin ] stop
						 */

						/**
						 * [tFileInputJSON_1 main ] start
						 */

						currentComponent = "tFileInputJSON_1";

						tos_count_tFileInputJSON_1++;

						/**
						 * [tFileInputJSON_1 main ] stop
						 */

						/**
						 * [tFileInputJSON_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputJSON_1";

						/**
						 * [tFileInputJSON_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

///////////////////////		

							String[] row_tLogRow_1 = new String[13];

							if (row1.hashtag_id != null) { //
								row_tLogRow_1[0] = String.valueOf(row1.hashtag_id);

							} //

							if (row1.user_name != null) { //
								row_tLogRow_1[1] = String.valueOf(row1.user_name);

							} //

							if (row1.user_screen_name != null) { //
								row_tLogRow_1[2] = String.valueOf(row1.user_screen_name);

							} //

							if (row1.text_description != null) { //
								row_tLogRow_1[3] = String.valueOf(row1.text_description);

							} //

							if (row1.date_id != null) { //
								row_tLogRow_1[4] = String.valueOf(row1.date_id);

							} //

							if (row1.geo_id != null) { //
								row_tLogRow_1[5] = String.valueOf(row1.geo_id);

							} //

							if (row1.text_id != null) { //
								row_tLogRow_1[6] = String.valueOf(row1.text_id);

							} //

							if (row1.geo_description != null) { //
								row_tLogRow_1[7] = String.valueOf(row1.geo_description);

							} //

							if (row1.user_id != null) { //
								row_tLogRow_1[8] = String.valueOf(row1.user_id);

							} //

							if (row1.hashtag_text != null) { //
								row_tLogRow_1[9] = String.valueOf(row1.hashtag_text);

							} //

							if (row1.user_location != null) { //
								row_tLogRow_1[10] = String.valueOf(row1.user_location);

							} //

							if (row1.date_description != null) { //
								row_tLogRow_1[11] = FormatterUtils.format_Date(row1.date_description, "dd-MM-yyyy");

							} //

							if (row1.user_description != null) { //
								row_tLogRow_1[12] = String.valueOf(row1.user_description);

							} //

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputJSON_1 process_data_end ] start
						 */

						currentComponent = "tFileInputJSON_1";

						/**
						 * [tFileInputJSON_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputJSON_1 end ] start
						 */

						currentComponent = "tFileInputJSON_1";

					}
					globalMap.put("tFileInputJSON_1_NB_LINE", nb_line_tFileInputJSON_1);

					ok_Hash.put("tFileInputJSON_1", true);
					end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

					/**
					 * [tFileInputJSON_1 end ] stop
					 */

					/**
					 * [tLogRow_1 end ] start
					 */

					currentComponent = "tLogRow_1";

//////

					java.io.PrintStream consoleOut_tLogRow_1 = null;
					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}

					consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
					consoleOut_tLogRow_1.flush();
//////
					globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
					}

					ok_Hash.put("tLogRow_1", true);
					end_Hash.put("tLogRow_1", System.currentTimeMillis());

					/**
					 * [tLogRow_1 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputJSON_1);
					}

					/**
					 * [tFileList_1 process_data_end ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				if (NB_FILEtFileList_1 == 0)
					throw new RuntimeException("No file found in directory " + directory_tFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final s1_stocking_data_into_db s1_stocking_data_into_dbClass = new s1_stocking_data_into_db();

		int exitCode = s1_stocking_data_into_dbClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = s1_stocking_data_into_db.class.getClassLoader().getResourceAsStream(
					"analysis_twitter/s1_stocking_data_into_db_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = s1_stocking_data_into_db.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("connection_postgres_Port", "id_String");
					context.connection_postgres_Port = (String) context.getProperty("connection_postgres_Port");
					context.setContextType("connection_postgres_Schema", "id_String");
					context.connection_postgres_Schema = (String) context.getProperty("connection_postgres_Schema");
					context.setContextType("connection_postgres_Database", "id_String");
					context.connection_postgres_Database = (String) context.getProperty("connection_postgres_Database");
					context.setContextType("connection_postgres_Server", "id_String");
					context.connection_postgres_Server = (String) context.getProperty("connection_postgres_Server");
					context.setContextType("connection_postgres_Password", "id_Password");
					String pwd_connection_postgres_Password_value = context.getProperty("connection_postgres_Password");
					context.connection_postgres_Password = null;
					if (pwd_connection_postgres_Password_value != null) {
						if (context_param.containsKey("connection_postgres_Password")) {// no need to decrypt if it come
																						// from program argument or
																						// parent job runtime
							context.connection_postgres_Password = pwd_connection_postgres_Password_value;
						} else if (!pwd_connection_postgres_Password_value.isEmpty()) {
							try {
								context.connection_postgres_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_connection_postgres_Password_value);
								context.put("connection_postgres_Password", context.connection_postgres_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("connection_postgres_AdditionalParams", "id_String");
					context.connection_postgres_AdditionalParams = (String) context
							.getProperty("connection_postgres_AdditionalParams");
					context.setContextType("connection_postgres_Login", "id_String");
					context.connection_postgres_Login = (String) context.getProperty("connection_postgres_Login");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("connection_postgres_Port")) {
				context.connection_postgres_Port = (String) parentContextMap.get("connection_postgres_Port");
			}
			if (parentContextMap.containsKey("connection_postgres_Schema")) {
				context.connection_postgres_Schema = (String) parentContextMap.get("connection_postgres_Schema");
			}
			if (parentContextMap.containsKey("connection_postgres_Database")) {
				context.connection_postgres_Database = (String) parentContextMap.get("connection_postgres_Database");
			}
			if (parentContextMap.containsKey("connection_postgres_Server")) {
				context.connection_postgres_Server = (String) parentContextMap.get("connection_postgres_Server");
			}
			if (parentContextMap.containsKey("connection_postgres_Password")) {
				context.connection_postgres_Password = (java.lang.String) parentContextMap
						.get("connection_postgres_Password");
			}
			if (parentContextMap.containsKey("connection_postgres_AdditionalParams")) {
				context.connection_postgres_AdditionalParams = (String) parentContextMap
						.get("connection_postgres_AdditionalParams");
			}
			if (parentContextMap.containsKey("connection_postgres_Login")) {
				context.connection_postgres_Login = (String) parentContextMap.get("connection_postgres_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("connection_postgres_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileList_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileList_1) {
			globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

			e_tFileList_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : s1_stocking_data_into_db");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 74266 characters generated by Talend Open Studio for Big Data on the December
 * 6, 2020 1:02:11 AM CET
 ************************************************************************************************/